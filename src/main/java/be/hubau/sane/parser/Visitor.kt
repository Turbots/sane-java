package be.hubau.sane.parser

interface Visitor {
    fun visit(rule: Rule_newline): Any?
    fun visit(rule: Rule_ws): Any?
    fun visit(rule: Rule_expression): Any?
    fun visit(rule: Rule_sane): Any?
    fun visit(rule: Rule_comment_start_symbol): Any?
    fun visit(rule: Rule_non_eol): Any?
    fun visit(rule: Rule_comment): Any?
    fun visit(rule: Rule_keyval): Any?
    fun visit(rule: Rule_key): Any?
    fun visit(rule: Rule_simple_key): Any?
    fun visit(rule: Rule_unquoted_key): Any?
    fun visit(rule: Rule_quoted_key): Any?
    fun visit(rule: Rule_dotted_key): Any?
    fun visit(rule: Rule_dot_sep): Any?
    fun visit(rule: Rule_keyval_sep): Any?
    fun visit(rule: Rule_val): Any?
    fun visit(rule: Rule_string): Any?
    fun visit(rule: Rule_basic_string): Any?
    fun visit(rule: Rule_quotation_mark): Any?
    fun visit(rule: Rule_basic_char): Any?
    fun visit(rule: Rule_basic_unescaped): Any?
    fun visit(rule: Rule_escaped): Any?
    fun visit(rule: Rule_escape): Any?
    fun visit(rule: Rule_escape_seq_char): Any?
    fun visit(rule: Rule_ml_basic_string): Any?
    fun visit(rule: Rule_ml_basic_string_delim): Any?
    fun visit(rule: Rule_ml_basic_body): Any?
    fun visit(rule: Rule_ml_basic_char): Any?
    fun visit(rule: Rule_ml_basic_unescaped): Any?
    fun visit(rule: Rule_literal_string): Any?
    fun visit(rule: Rule_apostrophe): Any?
    fun visit(rule: Rule_literal_char): Any?
    fun visit(rule: Rule_ml_literal_string): Any?
    fun visit(rule: Rule_ml_literal_string_delim): Any?
    fun visit(rule: Rule_ml_literal_body): Any?
    fun visit(rule: Rule_ml_literal_char): Any?
    fun visit(rule: Rule_integer): Any?
    fun visit(rule: Rule_minus): Any?
    fun visit(rule: Rule_plus): Any?
    fun visit(rule: Rule_underscore): Any?
    fun visit(rule: Rule_digit1_9): Any?
    fun visit(rule: Rule_digit0_7): Any?
    fun visit(rule: Rule_digit0_1): Any?
    fun visit(rule: Rule_hex_prefix): Any?
    fun visit(rule: Rule_oct_prefix): Any?
    fun visit(rule: Rule_bin_prefix): Any?
    fun visit(rule: Rule_dec_int): Any?
    fun visit(rule: Rule_unsigned_dec_int): Any?
    fun visit(rule: Rule_hex_int): Any?
    fun visit(rule: Rule_oct_int): Any?
    fun visit(rule: Rule_bin_int): Any?
    fun visit(rule: Rule_float): Any?
    fun visit(rule: Rule_float_int_part): Any?
    fun visit(rule: Rule_frac): Any?
    fun visit(rule: Rule_decimal_point): Any?
    fun visit(rule: Rule_zero_prefixable_int): Any?
    fun visit(rule: Rule_exp): Any?
    fun visit(rule: Rule_special_float): Any?
    fun visit(rule: Rule_inf): Any?
    fun visit(rule: Rule_nan): Any?
    fun visit(rule: Rule_boolean): Any?
    fun visit(rule: Rule_true): Any?
    fun visit(rule: Rule_false): Any?
    fun visit(rule: Rule_list): Any?
    fun visit(rule: Rule_list_open): Any?
    fun visit(rule: Rule_list_close): Any?
    fun visit(rule: Rule_list_values): Any?
    fun visit(rule: Rule_list_sep): Any?
    fun visit(rule: Rule_ws_comment_newline): Any?
    fun visit(rule: Rule_map): Any?
    fun visit(rule: Rule_map_open): Any?
    fun visit(rule: Rule_map_close): Any?
    fun visit(rule: Rule_map_sep): Any?
    fun visit(rule: Rule_map_pair): Any?
    fun visit(rule: Rule_map_keyvals): Any?
    fun visit(rule: Rule_ALPHA): Any?
    fun visit(rule: Rule_DIGIT): Any?
    fun visit(rule: Rule_HEXDIG): Any?

    fun visit(value: TerminalStringValue): Any?
    fun visit(value: TerminalNumericValue): Any?
}